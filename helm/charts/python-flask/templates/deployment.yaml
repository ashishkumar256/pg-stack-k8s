---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.app.env }}-{{ .Values.global.project }}-{{ .Values.app.component }}-{{ .Values.app.type }}
  namespace: {{ .Values.app.env }}
  labels:
    deploy: {{ .Values.app.env }}-{{ .Values.global.project }}-{{ .Values.app.component }}-{{ .Values.app.type }}
    app: {{ .Values.app.env }}-{{ .Values.global.project }}-{{ .Values.app.component }}-{{ .Values.app.type }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.app.env }}-{{ .Values.global.project }}-{{ .Values.app.component }}-{{ .Values.app.type }}
  replicas: {{ (pluck .Values.app.env .Values.image.replicaCount | first).min }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        pods: {{ .Values.app.env }}-{{ .Values.global.project }}-{{ .Values.app.component }}-{{ .Values.app.type }}
        app: {{ .Values.app.env }}-{{ .Values.global.project }}-{{ .Values.app.component }}-{{ .Values.app.type }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configMap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }} 
    spec:
      {{- if and (has .Values.app.env (list "prd" "uat" )) (index .Values.nodeSelector .Values.app.env) }}
      nodeSelector:
        eks.amazonaws.com/nodegroup: {{ (pluck .Values.app.env .Values.nodeSelector | first) }}
      {{- end }}  
      {{- if and (has .Values.app.env (list "dev" "stg" "prf" )) (index .Values.nodeSelector .Values.app.env) }}
      nodeSelector:
        eks.amazonaws.com/capacityType: {{ (pluck .Values.app.env .Values.nodeSelector | first) }}
      {{- end }}              
      containers:
      - name: mysql
        image: mysql:8.0-oracle
        env:
          - name: MYSQL_ROOT_PASSWORD
            value: root
          - name: MYSQL_USER
            value: ""
          - name: MYSQL_PASSWORD
            value: ""
          - name: MYSQL_DATABASE
            value: ""                                              
        volumeMounts:
          - name: mysql-data
            mountPath: /var/lib/mysql
      - name: {{ .Values.app.env }}-{{ .Values.global.project }}-{{ .Values.app.component }}-{{ .Values.app.type }}
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if  index .Values.service "ports" }}
        ports:
        {{- range $key, $val := .Values.service.ports }}
        - containerPort: {{ $val.port }}
          name: {{ $val.name }}
        {{- end }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: {{ .Values.app.env }}-{{ .Values.global.project }}-{{ .Values.app.component }}-{{ .Values.app.type }}-app 
        - secretRef:
            name: {{ .Values.app.env }}-{{ .Values.global.project }}-{{ .Values.app.component }}-{{ .Values.app.type }}-app
        readinessProbe:
{{ toYaml .Values.health_check | indent 10 }}
        livenessProbe:
{{ toYaml .Values.health_check | indent 10 }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
      volumes:
        - name: mysql-data
          hostPath:
            path: /var/lib/mysql
